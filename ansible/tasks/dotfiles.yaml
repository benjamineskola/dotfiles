---
- name: Ensure default XDG paths are symlinked
  block:
    - name: Ensure .local exists
      file:
        dest: "{{ ansible_env.HOME }}/.local"
        state: directory
        mode: 0700
    - name: Ensure .local subdirectories are linked into place
      file:
        src: "{{ ansible_env.HOME }}/Library"
        dest: "{{ ansible_env.HOME }}/.local/{{ item.name }}"
        state: link
      loop:
        - { name: share }
        - { name: state }

- name: Ensure dotfiles and scripts are up to date # noqa command-instead-of-module
  shell:
    cmd: git pull --rebase -q || true
    chdir: "{{ item }}"
  loop:
    - "{{ ansible_env.XDG_CONFIG_HOME }}"
    - "{{ ansible_env.HOME }}/bin"
  register: git_update
  changed_when: '"Already up to date." not in git_update.stdout'

- name: Link preferences into place
  file:
    src: "{{ ansible_env.XDG_CONFIG_HOME }}/{{ item }}"
    dest: "{{ ansible_env.HOME }}/Library/Preferences/{{ item }}"
    state: link
  loop:
    - espanso

- name: Link application support into place
  file:
    src: "{{ ansible_env.XDG_CONFIG_HOME }}/{{ item }}"
    dest: "{{ ansible_env.HOME }}/Library/Application Support/{{ item }}"
    state: link
  loop:
    - rustfmt

- name: Create iTerm2 script directory
  file:
    dest: "{{ ansible_env.XDG_DATA_HOME }}/Application Support/iTerm2/Scripts"
    state: directory
    mode: 0700
- name: Link iTerm2 scripts into place
  file:
    src: "{{ item }}"
    dest: "{{ ansible_env.XDG_DATA_HOME }}/Application Support/iTerm2/Scripts"
    state: link
  with_fileglob:
    - "{{ ansible_env.XDG_CONFIG_HOME }}/scripts/iterm*"

- name: Check age of iTerm2 integration
  find:
    paths:
      - "{{ ansible_env.XDG_CONFIG_HOME }}/fish/conf.d"
    pattern: zzz_iterm2_shell_integration.fish
    age: -7d
  register: iterm2_integration

- name: Install iTerm2 integration
  get_url:
    url: https://iterm2.com/shell_integration/fish
    dest: "{{ ansible_env.XDG_CONFIG_HOME }}/fish/conf.d/zzz_iterm2_shell_integration.fish"
    mode: 0600
  when: iterm2_integration.matched == 0

- name: Install dotfiles
  file:
    src: "{{ item }}"
    dest: '{{ ansible_env.HOME }}/{{ item | basename | regex_replace("^_", ".") }}'
    state: link
  with_fileglob:
    - "{{ ansible_env.XDG_CONFIG_HOME }}/_*"
    - "{{ ansible_env.XDG_CONFIG_HOME }}/private/_*"

- name: Clean up old dotfile links
  command: find -L "$HOME" -type l -maxdepth 1 -name '.*' -exec rm {} +
  changed_when: true

- name: Ensure LaunchAgents directory exists
  file:
    dest: "{{ ansible_env.XDG_DATA_HOME }}/LaunchAgents"
    state: directory
    mode: 0700

- name: Generate plists
  template:
    src: templates/launchagent.plist.j2
    dest: "{{ ansible_env.XDG_DATA_HOME }}/LaunchAgents/{{ item.name }}.plist"
    lstrip_blocks: true
    mode: 0600
  register: plists
  loop:
    - name: uk.eskola.autodarkmode
      command: "{{ ansible_env.HOME }}/bin/autodarkmode.py | ts"
      start_interval: 60
    - name: uk.eskola.setenv
      command: |
        launchctl setenv XDG_CONFIG_HOME {{ ansible_env.HOME }}/.config
        launchctl setenv XDG_DATA_HOME   {{ ansible_env.HOME }}/Library
        launchctl setenv XDG_CACHE_HOME  {{ ansible_env.HOME }}/Library/Caches
        launchctl setenv XDG_STATE_HOME  {{ ansible_env.HOME }}/Library
      run_at_load: true
  vars:
    env:
      - PATH
      - SSH_AUTH_SOCK
      - XDG_CACHE_HOME
      - XDG_CONFIG_HOME
      - XDG_DATA_HOME

- name: Calculate cron plist inputs
  set_fact:
    cron_items: |
      {{ cron_items | default([]) + [{
        'name': 'uk.eskola.cron' + ('daily' if 'cron.d/daily' in item else 'hourly')  + '.' + (item | basename | splitext | first),
        'command': '/bin/bash -c "' + item + ' 1> >(ts >&1) 2> >(ts >&2)"',
        'shell': '/opt/homebrew/bin/fish',
        'schedule': {'hour': 7, 'minute': 0} if 'cron.d/daily' in item else {'minute': 0},
        'run_at_load': 'cron.d/daily' in item
      }] }}
  with_fileglob:
    - "{{ ansible_env.XDG_CONFIG_HOME }}/cron.d/daily/*"
    - "{{ ansible_env.XDG_CONFIG_HOME }}/private/cron.d/daily/*"
    - "{{ ansible_env.XDG_CONFIG_HOME }}/cron.d/hourly/*"
    - "{{ ansible_env.XDG_CONFIG_HOME }}/private/cron.d/hourly/*"

- name: Generate cron plists
  template:
    src: templates/launchagent.plist.j2
    dest: "{{ ansible_env.XDG_DATA_HOME }}/LaunchAgents/{{ item.name }}.plist"
    lstrip_blocks: true
    mode: 0600
  register: plists_cron
  loop: "{{ cron_items }}"
  vars:
    env:
      - PATH
      - SSH_AUTH_SOCK
      - XDG_CACHE_HOME
      - XDG_CONFIG_HOME
      - XDG_DATA_HOME

- name: Stop changed plists
  command: launchctl unload {{ item.item.name }}.plist
  changed_when: true
  loop: "{{ (plists.results + plists_cron.results) | selectattr('changed') }}"

- name: Run plists
  community.general.launchd:
    name: "{{ item.item.name }}"
    state: started
  loop: "{{ (plists.results + plists_cron.results) | selectattr('changed') }}"

- name: Tidy plists
  shell: launchctl unload {{ item | basename }} && rm -f {{ item }}
  when: item not in ((plists.results + plists_cron.results) | map(attribute='dest'))
  with_fileglob: "{{ ansible_env.XDG_DATA_HOME }}/LaunchAgents/uk.eskola.*"

- name: Configure logrotate
  block:
    - name: Create logrotate directory
      file:
        path: /opt/homebrew/etc/logrotate.d
        state: directory
        mode: 0700
    - name: Create logrotate cron config
      template:
        src: templates/logrotate-cron.conf.j2
        dest: /opt/homebrew/etc/logrotate.d/cron.conf
        mode: 0600
