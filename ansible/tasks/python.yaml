---
- name: Install Python versions
  environment:
    PYENV_ROOT: "{{ ansible_env.XDG_DATA_HOME }}/pythons"
  block:
    - name: Get available minor versions
      shell: python-build --definitions | grep "^3" | grep -v "[a-z]" | cut -d . -f 1-2 | sort -u --version-sort | tail -n +8
      register: python_minor_versions
      changed_when: false
    - name: Get patch version for each minor version
      shell: python-build --definitions | grep "^{{ item }}\." | tail -n 1
      with_items: "{{ python_minor_versions.stdout_lines }}"
      register: python_versions
      changed_when: false
    - name: Install latest patch version for each minor version
      command:
        cmd: pyenv install -s {{ item }}
        creates: "{{ ansible_env.XDG_DATA_HOME }}/pythons/versions/{{ item }}"
      with_items: '{{ python_versions.results | map(attribute="stdout_lines") }}'
      register: python_install
    - name: Set newest version as default
      command: pyenv global {{ python_versions.results | map(attribute="stdout_lines") | last | first }}
      changed_when: python_install.results | last is changed
    - name: Find installed python versions
      find:
        paths: ["{{ ansible_env.XDG_DATA_HOME }}/pythons/versions"]
        recurse: false
        file_type: directory
      register: installed_pythons
    - name: Upgrade Pip
      command: "{{ item }}/bin/python -m pip install --upgrade pip"
      loop: "{{ installed_pythons.files | map(attribute='path') }}"
      changed_when: "'Requirement already satisfied: pip' not in upgrade_pip.stdout"
      register: upgrade_pip
    - name: Install required packages
      command: "{{ item }}/bin/python -m pip install -r {{ ansible_env.XDG_CONFIG_HOME }}/requirements.txt"
      loop: "{{ installed_pythons.files | map(attribute='path') }}"
      changed_when: "'Successfully installed' in python_requirements.stdout"
      register: python_requirements
