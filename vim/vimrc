if !has('nvim')
  set directory=$XDG_CACHE_HOME/vim,~/,/tmp
  set backupdir=$XDG_CACHE_HOME/vim,~/,/tmp
  set viewdir=$XDG_CACHE_HOME/vim/views
  set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
  set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME

  let $MYVIMRC=$XDG_CONFIG_HOME . '/vim/vimrc'
endif

if empty(glob($XDG_CONFIG_HOME . '/vim/autoload/plug.vim'))
  silent !curl -fLo $XDG_CONFIG_HOME/vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
" {{{
call plug#begin()
  Plug 'airblade/vim-gitgutter'
  Plug 'benjamineskola/vim-applescript'
  Plug 'christoomey/vim-sort-motion' | Plug 'kana/vim-textobj-indent'
  Plug 'davidhalter/jedi-vim'
  Plug 'ervandew/supertab'
  Plug 'janko/vim-test'
  Plug 'mileszs/ack.vim'
  Plug 'morhetz/gruvbox'
  Plug 'nelstrom/vim-textobj-rubyblock' | Plug 'kana/vim-textobj-user'
  Plug 'Raimondi/delimitMate'
  Plug 'rizzatti/dash.vim'
  Plug 'sheerun/vim-polyglot'
  Plug 'sjl/gundo.vim'
  Plug 'sjl/splice.vim'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-unimpaired'
  Plug 'vim-airline/vim-airline'
  Plug 'w0rp/ale'
  Plug 'Yggdroot/indentLine'
  Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }

  if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  else
    Plug 'Shougo/deoplete.nvim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
  endif

  " Deoplete sources
  Plug 'deoplete-plugins/deoplete-jedi' " python
  Plug 'Shougo/neco-vim' " vim
  Plug 'uplus/deoplete-solargraph' " ruby
  Plug 'Shougo/neco-syntax' " language syntax
call plug#end()
" }}}

set autoindent
set autoread
set backspace=indent,eol,start
set encoding=utf-8
set foldmethod=marker
set formatoptions+=j
if !has('nvim')
  set guifont=Iosevka:h14
endif
set hidden
set history=10000
set hlsearch incsearch
set ignorecase smartcase
set laststatus=2
set mouse+=a
set nofsync
set nomodeline
set nrformats-=octal
set number relativenumber
set pastetoggle=<F10>
set scrolloff=5
set shell=/bin/sh\ -i
set showcmd
set signcolumn=yes
set spell spelllang=en_gb
set ttimeout ttimeoutlen=50
set viewoptions=folds
set wildmenu

set grepprg=rg\ --vimgrep\ $*
set grepformat=%f:%l:%c:%m

" appearance.
if has('gui_vimr')
  set termguicolors
endif
set background=dark
colo gruvbox
syntax on

" filetype stuff.
filetype plugin indent on

" plugin settings
let g:ackprg = 'rg --vimgrep --hidden'

let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline#extensions#tabline#tab_nr_type = 2
let g:airline_powerline_fonts = 1
let g:airline_theme = 'gruvbox'

let g:ale_fix_on_save = 1
let g:ale_fixers = { '*': ['remove_trailing_lines', 'trim_whitespace'] }
let g:ale_open_list = 1
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1

let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1

let g:deoplete#enable_at_startup = 1

let g:gundo_prefer_python3 = 1

let g:indentLine_char = '‚é∏'

let g:jedi#completions_enabled = 0
let g:jedi#use_tabs_not_buffers = 1

let g:Lf_CacheDirectory = $XDG_CACHE_HOME
let g:Lf_CommandMap = {'<C-T>': ['<CR>']}
let g:Lf_WildIgnore = {
            \ 'dir': ['Library', 'Applications', '.git'],
            \ 'file': []
            \}
let g:Lf_ShowHidden = 1

let g:netrw_home = $XDG_CACHE_HOME . '/vim'

let g:sort_motion_flags = 'i'

if has('nvim')
  let test#strategy = 'neovim'
else
  let test#strategy = 'vimterminal'
endif

" miscellaneous

autocmd BufEnter * if &buftype == 'help' && &columns > 120 && &columns == winwidth(0) | wincmd L | endif
highlight SpellBad guisp=red

if has('nvim')
  autocmd TermOpen * setlocal nonumber norelativenumber
else
  autocmd TerminalOpen * setlocal nonumber norelativenumber
endif

if filereadable('/usr/local/opt/asdf/asdf.sh')
  let $ASDF_CONFIG_FILE = $XDG_CONFIG_HOME . '/asdfrc'
  let $ASDF_DATA_DIR = $XDG_DATA_HOME . '/asdf'
  let $ASDF_DEFAULT_TOOL_VERSIONS_FILENAME = $XDG_CONFIG_HOME . '/tool-versions'
  let $ASDF_DIR = '/usr/local/opt/asdf'
  let $ENV = '/usr/local/opt/asdf/asdf.sh'

  let $PYTHONPATH = expand($ASDF_DATA_DIR . '/installs/python/3.*/lib/python3.*/site-packages')
  let $PATH = $ASDF_DATA_DIR . '/shims:' . $PATH

  if has('nvim')
    let g:python3_host_prog = $XDG_DATA_HOME . '/asdf/shims/python'
    let g:ruby_host_prog = $XDG_DATA_HOME . '/asdf/shims/ruby'
  endif
end
