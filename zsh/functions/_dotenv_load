#!/usr/bin/env zsh
# set -ex

_dotenv_allowed() {
    if ! [ -f "$argv[1]" ] || ! [ -e "$XDG_DATA_HOME/dotenv.allow" ]; then
        return 0
    fi

    if fgrep -iq $(sha256sum "$argv[1]") "$XDG_DATA_HOME/dotenv.allow"; then
        return 0
    fi

    if [ -z "$_DOTENV_WARNED" ]; then
        echo "$argv[1] not permitted" >&2
        bat "$argv[1]"
        echo "dotenv_allow to allow" >&2
    fi
    return 1
}

# if dotenv root is set and we're no longer inside it, unsource dotenv vars
if [ "$PWD" != "$_DOTENV_ROOT" ] && ! grep -q "$_DOTENV_ROOT/*" <<<"$PWD"; then
    echo "unexporting $_DOTENV_VARS"
    unset $_DOTENV_VARS _DOTENV_VARS _DOTENV_ROOT _DOTENV_WARNED
fi

export _DOTENV_ROOT=$PWD
while [ "$_DOTENV_ROOT" != / ]; do
    if [ -e "$_DOTENV_ROOT/.env" ] || [ -e "$_DOTENV_ROOT/.env.local" ]; then
        break
    fi

    _DOTENV_ROOT=$(dirname $_DOTENV_ROOT)
done

if [ $_DOTENV_ROOT = / ]; then
    if [[ -n $_DOTENV_VARS ]]; then
        echo "unexporting $_DOTENV_VARS"
        unset $_DOTENV_VARS _DOTENV_VARS
    fi
    unset _DOTENV_ROOT _DOTENV_WARNED
    return
fi

# if dotenv exists, source it and record dotenv vars for unsetting later
typeset -la _DOTENV_FILES

if ! _dotenv_allowed "$_DOTENV_ROOT/.env" || ! _dotenv_allowed "$_DOTENV_ROOT/.env.local"; then
    export _DOTENV_WARNED=1
    return
fi

if [[ -n "$_DOTENV_VARS" ]]; then
    return
fi

typeset -ga _DOTENV_VARS
for file in .env .env.local; do
    if [ -e $_DOTENV_ROOT/$file ]; then
        typeset -ga _DOTENV_VARS
        _DOTENV_VARS+=($(cut -d '=' -f 1 $_DOTENV_ROOT/$file))
        _DOTENV_FILES+=($_DOTENV_ROOT/$file)
        vars_pattern="${(j[|])_DOTENV_VARS}"
        eval "export $(egrep -h "^($vars_pattern)=" $_DOTENV_ROOT/$file)"
    fi
done

echo "exporting $_DOTENV_VARS from $_DOTENV_FILES"
